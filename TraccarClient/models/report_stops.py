# coding: utf-8

"""
    4CS GPS Tracking System

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportStops(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'int',
        'device_name': 'str',
        'duration': 'int',
        'start_time': 'datetime',
        'address': 'str',
        'lat': 'float',
        'lon': 'float',
        'end_time': 'datetime',
        'spent_fuel': 'float',
        'engine_hours': 'int'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'device_name': 'deviceName',
        'duration': 'duration',
        'start_time': 'startTime',
        'address': 'address',
        'lat': 'lat',
        'lon': 'lon',
        'end_time': 'endTime',
        'spent_fuel': 'spentFuel',
        'engine_hours': 'engineHours'
    }

    def __init__(self, device_id=None, device_name=None, duration=None, start_time=None, address=None, lat=None, lon=None, end_time=None, spent_fuel=None, engine_hours=None):  # noqa: E501
        """ReportStops - a model defined in Swagger"""  # noqa: E501

        self._device_id = None
        self._device_name = None
        self._duration = None
        self._start_time = None
        self._address = None
        self._lat = None
        self._lon = None
        self._end_time = None
        self._spent_fuel = None
        self._engine_hours = None
        self.discriminator = None

        if device_id is not None:
            self.device_id = device_id
        if device_name is not None:
            self.device_name = device_name
        if duration is not None:
            self.duration = duration
        if start_time is not None:
            self.start_time = start_time
        if address is not None:
            self.address = address
        if lat is not None:
            self.lat = lat
        if lon is not None:
            self.lon = lon
        if end_time is not None:
            self.end_time = end_time
        if spent_fuel is not None:
            self.spent_fuel = spent_fuel
        if engine_hours is not None:
            self.engine_hours = engine_hours

    @property
    def device_id(self):
        """Gets the device_id of this ReportStops.  # noqa: E501


        :return: The device_id of this ReportStops.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this ReportStops.


        :param device_id: The device_id of this ReportStops.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def device_name(self):
        """Gets the device_name of this ReportStops.  # noqa: E501


        :return: The device_name of this ReportStops.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this ReportStops.


        :param device_name: The device_name of this ReportStops.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def duration(self):
        """Gets the duration of this ReportStops.  # noqa: E501


        :return: The duration of this ReportStops.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ReportStops.


        :param duration: The duration of this ReportStops.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def start_time(self):
        """Gets the start_time of this ReportStops.  # noqa: E501

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`  # noqa: E501

        :return: The start_time of this ReportStops.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ReportStops.

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`  # noqa: E501

        :param start_time: The start_time of this ReportStops.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def address(self):
        """Gets the address of this ReportStops.  # noqa: E501


        :return: The address of this ReportStops.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ReportStops.


        :param address: The address of this ReportStops.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def lat(self):
        """Gets the lat of this ReportStops.  # noqa: E501


        :return: The lat of this ReportStops.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this ReportStops.


        :param lat: The lat of this ReportStops.  # noqa: E501
        :type: float
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this ReportStops.  # noqa: E501


        :return: The lon of this ReportStops.  # noqa: E501
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this ReportStops.


        :param lon: The lon of this ReportStops.  # noqa: E501
        :type: float
        """

        self._lon = lon

    @property
    def end_time(self):
        """Gets the end_time of this ReportStops.  # noqa: E501

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`  # noqa: E501

        :return: The end_time of this ReportStops.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ReportStops.

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`  # noqa: E501

        :param end_time: The end_time of this ReportStops.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def spent_fuel(self):
        """Gets the spent_fuel of this ReportStops.  # noqa: E501

        in liters  # noqa: E501

        :return: The spent_fuel of this ReportStops.  # noqa: E501
        :rtype: float
        """
        return self._spent_fuel

    @spent_fuel.setter
    def spent_fuel(self, spent_fuel):
        """Sets the spent_fuel of this ReportStops.

        in liters  # noqa: E501

        :param spent_fuel: The spent_fuel of this ReportStops.  # noqa: E501
        :type: float
        """

        self._spent_fuel = spent_fuel

    @property
    def engine_hours(self):
        """Gets the engine_hours of this ReportStops.  # noqa: E501


        :return: The engine_hours of this ReportStops.  # noqa: E501
        :rtype: int
        """
        return self._engine_hours

    @engine_hours.setter
    def engine_hours(self, engine_hours):
        """Sets the engine_hours of this ReportStops.


        :param engine_hours: The engine_hours of this ReportStops.  # noqa: E501
        :type: int
        """

        self._engine_hours = engine_hours

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportStops, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportStops):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
