# coding: utf-8

"""
    4CS GPS Tracking System

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'int',
        'device_name': 'str',
        'max_speed': 'float',
        'average_speed': 'float',
        'distance': 'float',
        'spent_fuel': 'float',
        'engine_hours': 'int'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'device_name': 'deviceName',
        'max_speed': 'maxSpeed',
        'average_speed': 'averageSpeed',
        'distance': 'distance',
        'spent_fuel': 'spentFuel',
        'engine_hours': 'engineHours'
    }

    def __init__(self, device_id=None, device_name=None, max_speed=None, average_speed=None, distance=None, spent_fuel=None, engine_hours=None):  # noqa: E501
        """ReportSummary - a model defined in Swagger"""  # noqa: E501

        self._device_id = None
        self._device_name = None
        self._max_speed = None
        self._average_speed = None
        self._distance = None
        self._spent_fuel = None
        self._engine_hours = None
        self.discriminator = None

        if device_id is not None:
            self.device_id = device_id
        if device_name is not None:
            self.device_name = device_name
        if max_speed is not None:
            self.max_speed = max_speed
        if average_speed is not None:
            self.average_speed = average_speed
        if distance is not None:
            self.distance = distance
        if spent_fuel is not None:
            self.spent_fuel = spent_fuel
        if engine_hours is not None:
            self.engine_hours = engine_hours

    @property
    def device_id(self):
        """Gets the device_id of this ReportSummary.  # noqa: E501


        :return: The device_id of this ReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this ReportSummary.


        :param device_id: The device_id of this ReportSummary.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def device_name(self):
        """Gets the device_name of this ReportSummary.  # noqa: E501


        :return: The device_name of this ReportSummary.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this ReportSummary.


        :param device_name: The device_name of this ReportSummary.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def max_speed(self):
        """Gets the max_speed of this ReportSummary.  # noqa: E501

        in knots  # noqa: E501

        :return: The max_speed of this ReportSummary.  # noqa: E501
        :rtype: float
        """
        return self._max_speed

    @max_speed.setter
    def max_speed(self, max_speed):
        """Sets the max_speed of this ReportSummary.

        in knots  # noqa: E501

        :param max_speed: The max_speed of this ReportSummary.  # noqa: E501
        :type: float
        """

        self._max_speed = max_speed

    @property
    def average_speed(self):
        """Gets the average_speed of this ReportSummary.  # noqa: E501

        in knots  # noqa: E501

        :return: The average_speed of this ReportSummary.  # noqa: E501
        :rtype: float
        """
        return self._average_speed

    @average_speed.setter
    def average_speed(self, average_speed):
        """Sets the average_speed of this ReportSummary.

        in knots  # noqa: E501

        :param average_speed: The average_speed of this ReportSummary.  # noqa: E501
        :type: float
        """

        self._average_speed = average_speed

    @property
    def distance(self):
        """Gets the distance of this ReportSummary.  # noqa: E501

        in meters  # noqa: E501

        :return: The distance of this ReportSummary.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this ReportSummary.

        in meters  # noqa: E501

        :param distance: The distance of this ReportSummary.  # noqa: E501
        :type: float
        """

        self._distance = distance

    @property
    def spent_fuel(self):
        """Gets the spent_fuel of this ReportSummary.  # noqa: E501

        in liters  # noqa: E501

        :return: The spent_fuel of this ReportSummary.  # noqa: E501
        :rtype: float
        """
        return self._spent_fuel

    @spent_fuel.setter
    def spent_fuel(self, spent_fuel):
        """Sets the spent_fuel of this ReportSummary.

        in liters  # noqa: E501

        :param spent_fuel: The spent_fuel of this ReportSummary.  # noqa: E501
        :type: float
        """

        self._spent_fuel = spent_fuel

    @property
    def engine_hours(self):
        """Gets the engine_hours of this ReportSummary.  # noqa: E501


        :return: The engine_hours of this ReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._engine_hours

    @engine_hours.setter
    def engine_hours(self, engine_hours):
        """Sets the engine_hours of this ReportSummary.


        :param engine_hours: The engine_hours of this ReportSummary.  # noqa: E501
        :type: int
        """

        self._engine_hours = engine_hours

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
