# coding: utf-8

"""
    4CS GPS Tracking System

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Position(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'device_id': 'int',
        'protocol': 'str',
        'device_time': 'datetime',
        'fix_time': 'datetime',
        'server_time': 'datetime',
        'outdated': 'bool',
        'valid': 'bool',
        'latitude': 'float',
        'longitude': 'float',
        'altitude': 'float',
        'speed': 'float',
        'course': 'float',
        'address': 'str',
        'accuracy': 'float',
        'network': 'dict(str, object)',
        'attributes': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'device_id': 'deviceId',
        'protocol': 'protocol',
        'device_time': 'deviceTime',
        'fix_time': 'fixTime',
        'server_time': 'serverTime',
        'outdated': 'outdated',
        'valid': 'valid',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'altitude': 'altitude',
        'speed': 'speed',
        'course': 'course',
        'address': 'address',
        'accuracy': 'accuracy',
        'network': 'network',
        'attributes': 'attributes'
    }

    def __init__(self, id=None, device_id=None, protocol=None, device_time=None, fix_time=None, server_time=None, outdated=None, valid=None, latitude=None, longitude=None, altitude=None, speed=None, course=None, address=None, accuracy=None, network=None, attributes=None):  # noqa: E501
        """Position - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._device_id = None
        self._protocol = None
        self._device_time = None
        self._fix_time = None
        self._server_time = None
        self._outdated = None
        self._valid = None
        self._latitude = None
        self._longitude = None
        self._altitude = None
        self._speed = None
        self._course = None
        self._address = None
        self._accuracy = None
        self._network = None
        self._attributes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if device_id is not None:
            self.device_id = device_id
        if protocol is not None:
            self.protocol = protocol
        if device_time is not None:
            self.device_time = device_time
        if fix_time is not None:
            self.fix_time = fix_time
        if server_time is not None:
            self.server_time = server_time
        if outdated is not None:
            self.outdated = outdated
        if valid is not None:
            self.valid = valid
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if altitude is not None:
            self.altitude = altitude
        if speed is not None:
            self.speed = speed
        if course is not None:
            self.course = course
        if address is not None:
            self.address = address
        if accuracy is not None:
            self.accuracy = accuracy
        if network is not None:
            self.network = network
        if attributes is not None:
            self.attributes = attributes

    @property
    def id(self):
        """Gets the id of this Position.  # noqa: E501


        :return: The id of this Position.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Position.


        :param id: The id of this Position.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def device_id(self):
        """Gets the device_id of this Position.  # noqa: E501


        :return: The device_id of this Position.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this Position.


        :param device_id: The device_id of this Position.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def protocol(self):
        """Gets the protocol of this Position.  # noqa: E501


        :return: The protocol of this Position.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Position.


        :param protocol: The protocol of this Position.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def device_time(self):
        """Gets the device_time of this Position.  # noqa: E501

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`  # noqa: E501

        :return: The device_time of this Position.  # noqa: E501
        :rtype: datetime
        """
        return self._device_time

    @device_time.setter
    def device_time(self, device_time):
        """Sets the device_time of this Position.

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`  # noqa: E501

        :param device_time: The device_time of this Position.  # noqa: E501
        :type: datetime
        """

        self._device_time = device_time

    @property
    def fix_time(self):
        """Gets the fix_time of this Position.  # noqa: E501

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`  # noqa: E501

        :return: The fix_time of this Position.  # noqa: E501
        :rtype: datetime
        """
        return self._fix_time

    @fix_time.setter
    def fix_time(self, fix_time):
        """Sets the fix_time of this Position.

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`  # noqa: E501

        :param fix_time: The fix_time of this Position.  # noqa: E501
        :type: datetime
        """

        self._fix_time = fix_time

    @property
    def server_time(self):
        """Gets the server_time of this Position.  # noqa: E501

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`  # noqa: E501

        :return: The server_time of this Position.  # noqa: E501
        :rtype: datetime
        """
        return self._server_time

    @server_time.setter
    def server_time(self, server_time):
        """Sets the server_time of this Position.

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`  # noqa: E501

        :param server_time: The server_time of this Position.  # noqa: E501
        :type: datetime
        """

        self._server_time = server_time

    @property
    def outdated(self):
        """Gets the outdated of this Position.  # noqa: E501


        :return: The outdated of this Position.  # noqa: E501
        :rtype: bool
        """
        return self._outdated

    @outdated.setter
    def outdated(self, outdated):
        """Sets the outdated of this Position.


        :param outdated: The outdated of this Position.  # noqa: E501
        :type: bool
        """

        self._outdated = outdated

    @property
    def valid(self):
        """Gets the valid of this Position.  # noqa: E501


        :return: The valid of this Position.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this Position.


        :param valid: The valid of this Position.  # noqa: E501
        :type: bool
        """

        self._valid = valid

    @property
    def latitude(self):
        """Gets the latitude of this Position.  # noqa: E501


        :return: The latitude of this Position.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Position.


        :param latitude: The latitude of this Position.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Position.  # noqa: E501


        :return: The longitude of this Position.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Position.


        :param longitude: The longitude of this Position.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def altitude(self):
        """Gets the altitude of this Position.  # noqa: E501


        :return: The altitude of this Position.  # noqa: E501
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this Position.


        :param altitude: The altitude of this Position.  # noqa: E501
        :type: float
        """

        self._altitude = altitude

    @property
    def speed(self):
        """Gets the speed of this Position.  # noqa: E501

        in knots  # noqa: E501

        :return: The speed of this Position.  # noqa: E501
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this Position.

        in knots  # noqa: E501

        :param speed: The speed of this Position.  # noqa: E501
        :type: float
        """

        self._speed = speed

    @property
    def course(self):
        """Gets the course of this Position.  # noqa: E501


        :return: The course of this Position.  # noqa: E501
        :rtype: float
        """
        return self._course

    @course.setter
    def course(self, course):
        """Sets the course of this Position.


        :param course: The course of this Position.  # noqa: E501
        :type: float
        """

        self._course = course

    @property
    def address(self):
        """Gets the address of this Position.  # noqa: E501


        :return: The address of this Position.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Position.


        :param address: The address of this Position.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def accuracy(self):
        """Gets the accuracy of this Position.  # noqa: E501


        :return: The accuracy of this Position.  # noqa: E501
        :rtype: float
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this Position.


        :param accuracy: The accuracy of this Position.  # noqa: E501
        :type: float
        """

        self._accuracy = accuracy

    @property
    def network(self):
        """Gets the network of this Position.  # noqa: E501


        :return: The network of this Position.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Position.


        :param network: The network of this Position.  # noqa: E501
        :type: dict(str, object)
        """

        self._network = network

    @property
    def attributes(self):
        """Gets the attributes of this Position.  # noqa: E501


        :return: The attributes of this Position.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Position.


        :param attributes: The attributes of this Position.  # noqa: E501
        :type: dict(str, object)
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Position, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Position):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
