# coding: utf-8

"""
    4CS GPS Tracking System

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Device(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'unique_id': 'str',
        'status': 'str',
        'disabled': 'bool',
        'last_update': 'datetime',
        'position_id': 'int',
        'group_id': 'int',
        'phone': 'str',
        'model': 'str',
        'contact': 'str',
        'category': 'str',
        'geofence_ids': 'list[int]',
        'attributes': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'unique_id': 'uniqueId',
        'status': 'status',
        'disabled': 'disabled',
        'last_update': 'lastUpdate',
        'position_id': 'positionId',
        'group_id': 'groupId',
        'phone': 'phone',
        'model': 'model',
        'contact': 'contact',
        'category': 'category',
        'geofence_ids': 'geofenceIds',
        'attributes': 'attributes'
    }

    def __init__(self, id=None, name=None, unique_id=None, status=None, disabled=None, last_update=None, position_id=None, group_id=None, phone=None, model=None, contact=None, category=None, geofence_ids=None, attributes=None):  # noqa: E501
        """Device - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._unique_id = None
        self._status = None
        self._disabled = None
        self._last_update = None
        self._position_id = None
        self._group_id = None
        self._phone = None
        self._model = None
        self._contact = None
        self._category = None
        self._geofence_ids = None
        self._attributes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if unique_id is not None:
            self.unique_id = unique_id
        if status is not None:
            self.status = status
        if disabled is not None:
            self.disabled = disabled
        if last_update is not None:
            self.last_update = last_update
        if position_id is not None:
            self.position_id = position_id
        if group_id is not None:
            self.group_id = group_id
        if phone is not None:
            self.phone = phone
        if model is not None:
            self.model = model
        if contact is not None:
            self.contact = contact
        if category is not None:
            self.category = category
        if geofence_ids is not None:
            self.geofence_ids = geofence_ids
        if attributes is not None:
            self.attributes = attributes

    @property
    def id(self):
        """Gets the id of this Device.  # noqa: E501


        :return: The id of this Device.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Device.


        :param id: The id of this Device.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Device.  # noqa: E501


        :return: The name of this Device.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Device.


        :param name: The name of this Device.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def unique_id(self):
        """Gets the unique_id of this Device.  # noqa: E501


        :return: The unique_id of this Device.  # noqa: E501
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this Device.


        :param unique_id: The unique_id of this Device.  # noqa: E501
        :type: str
        """

        self._unique_id = unique_id

    @property
    def status(self):
        """Gets the status of this Device.  # noqa: E501


        :return: The status of this Device.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Device.


        :param status: The status of this Device.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def disabled(self):
        """Gets the disabled of this Device.  # noqa: E501


        :return: The disabled of this Device.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Device.


        :param disabled: The disabled of this Device.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def last_update(self):
        """Gets the last_update of this Device.  # noqa: E501

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`  # noqa: E501

        :return: The last_update of this Device.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Device.

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`  # noqa: E501

        :param last_update: The last_update of this Device.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def position_id(self):
        """Gets the position_id of this Device.  # noqa: E501


        :return: The position_id of this Device.  # noqa: E501
        :rtype: int
        """
        return self._position_id

    @position_id.setter
    def position_id(self, position_id):
        """Sets the position_id of this Device.


        :param position_id: The position_id of this Device.  # noqa: E501
        :type: int
        """

        self._position_id = position_id

    @property
    def group_id(self):
        """Gets the group_id of this Device.  # noqa: E501


        :return: The group_id of this Device.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Device.


        :param group_id: The group_id of this Device.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def phone(self):
        """Gets the phone of this Device.  # noqa: E501


        :return: The phone of this Device.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Device.


        :param phone: The phone of this Device.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def model(self):
        """Gets the model of this Device.  # noqa: E501


        :return: The model of this Device.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Device.


        :param model: The model of this Device.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def contact(self):
        """Gets the contact of this Device.  # noqa: E501


        :return: The contact of this Device.  # noqa: E501
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Device.


        :param contact: The contact of this Device.  # noqa: E501
        :type: str
        """

        self._contact = contact

    @property
    def category(self):
        """Gets the category of this Device.  # noqa: E501


        :return: The category of this Device.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Device.


        :param category: The category of this Device.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def geofence_ids(self):
        """Gets the geofence_ids of this Device.  # noqa: E501


        :return: The geofence_ids of this Device.  # noqa: E501
        :rtype: list[int]
        """
        return self._geofence_ids

    @geofence_ids.setter
    def geofence_ids(self, geofence_ids):
        """Sets the geofence_ids of this Device.


        :param geofence_ids: The geofence_ids of this Device.  # noqa: E501
        :type: list[int]
        """

        self._geofence_ids = geofence_ids

    @property
    def attributes(self):
        """Gets the attributes of this Device.  # noqa: E501


        :return: The attributes of this Device.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Device.


        :param attributes: The attributes of this Device.  # noqa: E501
        :type: dict(str, object)
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Device, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Device):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
