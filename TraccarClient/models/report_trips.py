# coding: utf-8

"""
    4CS GPS Tracking System

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportTrips(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'int',
        'device_name': 'str',
        'max_speed': 'float',
        'average_speed': 'float',
        'distance': 'float',
        'spent_fuel': 'float',
        'duration': 'int',
        'start_time': 'datetime',
        'start_address': 'str',
        'start_lat': 'float',
        'start_lon': 'float',
        'end_time': 'datetime',
        'end_address': 'str',
        'end_lat': 'float',
        'end_lon': 'float',
        'driver_unique_id': 'int',
        'driver_name': 'str'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'device_name': 'deviceName',
        'max_speed': 'maxSpeed',
        'average_speed': 'averageSpeed',
        'distance': 'distance',
        'spent_fuel': 'spentFuel',
        'duration': 'duration',
        'start_time': 'startTime',
        'start_address': 'startAddress',
        'start_lat': 'startLat',
        'start_lon': 'startLon',
        'end_time': 'endTime',
        'end_address': 'endAddress',
        'end_lat': 'endLat',
        'end_lon': 'endLon',
        'driver_unique_id': 'driverUniqueId',
        'driver_name': 'driverName'
    }

    def __init__(self, device_id=None, device_name=None, max_speed=None, average_speed=None, distance=None, spent_fuel=None, duration=None, start_time=None, start_address=None, start_lat=None, start_lon=None, end_time=None, end_address=None, end_lat=None, end_lon=None, driver_unique_id=None, driver_name=None):  # noqa: E501
        """ReportTrips - a model defined in Swagger"""  # noqa: E501

        self._device_id = None
        self._device_name = None
        self._max_speed = None
        self._average_speed = None
        self._distance = None
        self._spent_fuel = None
        self._duration = None
        self._start_time = None
        self._start_address = None
        self._start_lat = None
        self._start_lon = None
        self._end_time = None
        self._end_address = None
        self._end_lat = None
        self._end_lon = None
        self._driver_unique_id = None
        self._driver_name = None
        self.discriminator = None

        if device_id is not None:
            self.device_id = device_id
        if device_name is not None:
            self.device_name = device_name
        if max_speed is not None:
            self.max_speed = max_speed
        if average_speed is not None:
            self.average_speed = average_speed
        if distance is not None:
            self.distance = distance
        if spent_fuel is not None:
            self.spent_fuel = spent_fuel
        if duration is not None:
            self.duration = duration
        if start_time is not None:
            self.start_time = start_time
        if start_address is not None:
            self.start_address = start_address
        if start_lat is not None:
            self.start_lat = start_lat
        if start_lon is not None:
            self.start_lon = start_lon
        if end_time is not None:
            self.end_time = end_time
        if end_address is not None:
            self.end_address = end_address
        if end_lat is not None:
            self.end_lat = end_lat
        if end_lon is not None:
            self.end_lon = end_lon
        if driver_unique_id is not None:
            self.driver_unique_id = driver_unique_id
        if driver_name is not None:
            self.driver_name = driver_name

    @property
    def device_id(self):
        """Gets the device_id of this ReportTrips.  # noqa: E501


        :return: The device_id of this ReportTrips.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this ReportTrips.


        :param device_id: The device_id of this ReportTrips.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def device_name(self):
        """Gets the device_name of this ReportTrips.  # noqa: E501


        :return: The device_name of this ReportTrips.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this ReportTrips.


        :param device_name: The device_name of this ReportTrips.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def max_speed(self):
        """Gets the max_speed of this ReportTrips.  # noqa: E501

        in knots  # noqa: E501

        :return: The max_speed of this ReportTrips.  # noqa: E501
        :rtype: float
        """
        return self._max_speed

    @max_speed.setter
    def max_speed(self, max_speed):
        """Sets the max_speed of this ReportTrips.

        in knots  # noqa: E501

        :param max_speed: The max_speed of this ReportTrips.  # noqa: E501
        :type: float
        """

        self._max_speed = max_speed

    @property
    def average_speed(self):
        """Gets the average_speed of this ReportTrips.  # noqa: E501

        in knots  # noqa: E501

        :return: The average_speed of this ReportTrips.  # noqa: E501
        :rtype: float
        """
        return self._average_speed

    @average_speed.setter
    def average_speed(self, average_speed):
        """Sets the average_speed of this ReportTrips.

        in knots  # noqa: E501

        :param average_speed: The average_speed of this ReportTrips.  # noqa: E501
        :type: float
        """

        self._average_speed = average_speed

    @property
    def distance(self):
        """Gets the distance of this ReportTrips.  # noqa: E501

        in meters  # noqa: E501

        :return: The distance of this ReportTrips.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this ReportTrips.

        in meters  # noqa: E501

        :param distance: The distance of this ReportTrips.  # noqa: E501
        :type: float
        """

        self._distance = distance

    @property
    def spent_fuel(self):
        """Gets the spent_fuel of this ReportTrips.  # noqa: E501

        in liters  # noqa: E501

        :return: The spent_fuel of this ReportTrips.  # noqa: E501
        :rtype: float
        """
        return self._spent_fuel

    @spent_fuel.setter
    def spent_fuel(self, spent_fuel):
        """Sets the spent_fuel of this ReportTrips.

        in liters  # noqa: E501

        :param spent_fuel: The spent_fuel of this ReportTrips.  # noqa: E501
        :type: float
        """

        self._spent_fuel = spent_fuel

    @property
    def duration(self):
        """Gets the duration of this ReportTrips.  # noqa: E501


        :return: The duration of this ReportTrips.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ReportTrips.


        :param duration: The duration of this ReportTrips.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def start_time(self):
        """Gets the start_time of this ReportTrips.  # noqa: E501

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`  # noqa: E501

        :return: The start_time of this ReportTrips.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ReportTrips.

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`  # noqa: E501

        :param start_time: The start_time of this ReportTrips.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def start_address(self):
        """Gets the start_address of this ReportTrips.  # noqa: E501


        :return: The start_address of this ReportTrips.  # noqa: E501
        :rtype: str
        """
        return self._start_address

    @start_address.setter
    def start_address(self, start_address):
        """Sets the start_address of this ReportTrips.


        :param start_address: The start_address of this ReportTrips.  # noqa: E501
        :type: str
        """

        self._start_address = start_address

    @property
    def start_lat(self):
        """Gets the start_lat of this ReportTrips.  # noqa: E501


        :return: The start_lat of this ReportTrips.  # noqa: E501
        :rtype: float
        """
        return self._start_lat

    @start_lat.setter
    def start_lat(self, start_lat):
        """Sets the start_lat of this ReportTrips.


        :param start_lat: The start_lat of this ReportTrips.  # noqa: E501
        :type: float
        """

        self._start_lat = start_lat

    @property
    def start_lon(self):
        """Gets the start_lon of this ReportTrips.  # noqa: E501


        :return: The start_lon of this ReportTrips.  # noqa: E501
        :rtype: float
        """
        return self._start_lon

    @start_lon.setter
    def start_lon(self, start_lon):
        """Sets the start_lon of this ReportTrips.


        :param start_lon: The start_lon of this ReportTrips.  # noqa: E501
        :type: float
        """

        self._start_lon = start_lon

    @property
    def end_time(self):
        """Gets the end_time of this ReportTrips.  # noqa: E501

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`  # noqa: E501

        :return: The end_time of this ReportTrips.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ReportTrips.

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`  # noqa: E501

        :param end_time: The end_time of this ReportTrips.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def end_address(self):
        """Gets the end_address of this ReportTrips.  # noqa: E501


        :return: The end_address of this ReportTrips.  # noqa: E501
        :rtype: str
        """
        return self._end_address

    @end_address.setter
    def end_address(self, end_address):
        """Sets the end_address of this ReportTrips.


        :param end_address: The end_address of this ReportTrips.  # noqa: E501
        :type: str
        """

        self._end_address = end_address

    @property
    def end_lat(self):
        """Gets the end_lat of this ReportTrips.  # noqa: E501


        :return: The end_lat of this ReportTrips.  # noqa: E501
        :rtype: float
        """
        return self._end_lat

    @end_lat.setter
    def end_lat(self, end_lat):
        """Sets the end_lat of this ReportTrips.


        :param end_lat: The end_lat of this ReportTrips.  # noqa: E501
        :type: float
        """

        self._end_lat = end_lat

    @property
    def end_lon(self):
        """Gets the end_lon of this ReportTrips.  # noqa: E501


        :return: The end_lon of this ReportTrips.  # noqa: E501
        :rtype: float
        """
        return self._end_lon

    @end_lon.setter
    def end_lon(self, end_lon):
        """Sets the end_lon of this ReportTrips.


        :param end_lon: The end_lon of this ReportTrips.  # noqa: E501
        :type: float
        """

        self._end_lon = end_lon

    @property
    def driver_unique_id(self):
        """Gets the driver_unique_id of this ReportTrips.  # noqa: E501


        :return: The driver_unique_id of this ReportTrips.  # noqa: E501
        :rtype: int
        """
        return self._driver_unique_id

    @driver_unique_id.setter
    def driver_unique_id(self, driver_unique_id):
        """Sets the driver_unique_id of this ReportTrips.


        :param driver_unique_id: The driver_unique_id of this ReportTrips.  # noqa: E501
        :type: int
        """

        self._driver_unique_id = driver_unique_id

    @property
    def driver_name(self):
        """Gets the driver_name of this ReportTrips.  # noqa: E501


        :return: The driver_name of this ReportTrips.  # noqa: E501
        :rtype: str
        """
        return self._driver_name

    @driver_name.setter
    def driver_name(self, driver_name):
        """Sets the driver_name of this ReportTrips.


        :param driver_name: The driver_name of this ReportTrips.  # noqa: E501
        :type: str
        """

        self._driver_name = driver_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportTrips, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportTrips):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
