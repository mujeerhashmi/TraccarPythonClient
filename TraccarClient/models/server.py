# coding: utf-8

"""
    4CS GPS Tracking System

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Server(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'registration': 'bool',
        'readonly': 'bool',
        'device_readonly': 'bool',
        'limit_commands': 'bool',
        'map': 'str',
        'bing_key': 'str',
        'map_url': 'str',
        'poi_layer': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'zoom': 'int',
        'twelve_hour_format': 'bool',
        'version': 'str',
        'force_settings': 'bool',
        'coordinate_format': 'str',
        'attributes': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'registration': 'registration',
        'readonly': 'readonly',
        'device_readonly': 'deviceReadonly',
        'limit_commands': 'limitCommands',
        'map': 'map',
        'bing_key': 'bingKey',
        'map_url': 'mapUrl',
        'poi_layer': 'poiLayer',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'zoom': 'zoom',
        'twelve_hour_format': 'twelveHourFormat',
        'version': 'version',
        'force_settings': 'forceSettings',
        'coordinate_format': 'coordinateFormat',
        'attributes': 'attributes'
    }

    def __init__(self, id=None, registration=None, readonly=None, device_readonly=None, limit_commands=None, map=None, bing_key=None, map_url=None, poi_layer=None, latitude=None, longitude=None, zoom=None, twelve_hour_format=None, version=None, force_settings=None, coordinate_format=None, attributes=None):  # noqa: E501
        """Server - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._registration = None
        self._readonly = None
        self._device_readonly = None
        self._limit_commands = None
        self._map = None
        self._bing_key = None
        self._map_url = None
        self._poi_layer = None
        self._latitude = None
        self._longitude = None
        self._zoom = None
        self._twelve_hour_format = None
        self._version = None
        self._force_settings = None
        self._coordinate_format = None
        self._attributes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if registration is not None:
            self.registration = registration
        if readonly is not None:
            self.readonly = readonly
        if device_readonly is not None:
            self.device_readonly = device_readonly
        if limit_commands is not None:
            self.limit_commands = limit_commands
        if map is not None:
            self.map = map
        if bing_key is not None:
            self.bing_key = bing_key
        if map_url is not None:
            self.map_url = map_url
        if poi_layer is not None:
            self.poi_layer = poi_layer
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if zoom is not None:
            self.zoom = zoom
        if twelve_hour_format is not None:
            self.twelve_hour_format = twelve_hour_format
        if version is not None:
            self.version = version
        if force_settings is not None:
            self.force_settings = force_settings
        if coordinate_format is not None:
            self.coordinate_format = coordinate_format
        if attributes is not None:
            self.attributes = attributes

    @property
    def id(self):
        """Gets the id of this Server.  # noqa: E501


        :return: The id of this Server.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Server.


        :param id: The id of this Server.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def registration(self):
        """Gets the registration of this Server.  # noqa: E501


        :return: The registration of this Server.  # noqa: E501
        :rtype: bool
        """
        return self._registration

    @registration.setter
    def registration(self, registration):
        """Sets the registration of this Server.


        :param registration: The registration of this Server.  # noqa: E501
        :type: bool
        """

        self._registration = registration

    @property
    def readonly(self):
        """Gets the readonly of this Server.  # noqa: E501


        :return: The readonly of this Server.  # noqa: E501
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this Server.


        :param readonly: The readonly of this Server.  # noqa: E501
        :type: bool
        """

        self._readonly = readonly

    @property
    def device_readonly(self):
        """Gets the device_readonly of this Server.  # noqa: E501


        :return: The device_readonly of this Server.  # noqa: E501
        :rtype: bool
        """
        return self._device_readonly

    @device_readonly.setter
    def device_readonly(self, device_readonly):
        """Sets the device_readonly of this Server.


        :param device_readonly: The device_readonly of this Server.  # noqa: E501
        :type: bool
        """

        self._device_readonly = device_readonly

    @property
    def limit_commands(self):
        """Gets the limit_commands of this Server.  # noqa: E501


        :return: The limit_commands of this Server.  # noqa: E501
        :rtype: bool
        """
        return self._limit_commands

    @limit_commands.setter
    def limit_commands(self, limit_commands):
        """Sets the limit_commands of this Server.


        :param limit_commands: The limit_commands of this Server.  # noqa: E501
        :type: bool
        """

        self._limit_commands = limit_commands

    @property
    def map(self):
        """Gets the map of this Server.  # noqa: E501


        :return: The map of this Server.  # noqa: E501
        :rtype: str
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this Server.


        :param map: The map of this Server.  # noqa: E501
        :type: str
        """

        self._map = map

    @property
    def bing_key(self):
        """Gets the bing_key of this Server.  # noqa: E501


        :return: The bing_key of this Server.  # noqa: E501
        :rtype: str
        """
        return self._bing_key

    @bing_key.setter
    def bing_key(self, bing_key):
        """Sets the bing_key of this Server.


        :param bing_key: The bing_key of this Server.  # noqa: E501
        :type: str
        """

        self._bing_key = bing_key

    @property
    def map_url(self):
        """Gets the map_url of this Server.  # noqa: E501


        :return: The map_url of this Server.  # noqa: E501
        :rtype: str
        """
        return self._map_url

    @map_url.setter
    def map_url(self, map_url):
        """Sets the map_url of this Server.


        :param map_url: The map_url of this Server.  # noqa: E501
        :type: str
        """

        self._map_url = map_url

    @property
    def poi_layer(self):
        """Gets the poi_layer of this Server.  # noqa: E501


        :return: The poi_layer of this Server.  # noqa: E501
        :rtype: str
        """
        return self._poi_layer

    @poi_layer.setter
    def poi_layer(self, poi_layer):
        """Sets the poi_layer of this Server.


        :param poi_layer: The poi_layer of this Server.  # noqa: E501
        :type: str
        """

        self._poi_layer = poi_layer

    @property
    def latitude(self):
        """Gets the latitude of this Server.  # noqa: E501


        :return: The latitude of this Server.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Server.


        :param latitude: The latitude of this Server.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Server.  # noqa: E501


        :return: The longitude of this Server.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Server.


        :param longitude: The longitude of this Server.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def zoom(self):
        """Gets the zoom of this Server.  # noqa: E501


        :return: The zoom of this Server.  # noqa: E501
        :rtype: int
        """
        return self._zoom

    @zoom.setter
    def zoom(self, zoom):
        """Sets the zoom of this Server.


        :param zoom: The zoom of this Server.  # noqa: E501
        :type: int
        """

        self._zoom = zoom

    @property
    def twelve_hour_format(self):
        """Gets the twelve_hour_format of this Server.  # noqa: E501


        :return: The twelve_hour_format of this Server.  # noqa: E501
        :rtype: bool
        """
        return self._twelve_hour_format

    @twelve_hour_format.setter
    def twelve_hour_format(self, twelve_hour_format):
        """Sets the twelve_hour_format of this Server.


        :param twelve_hour_format: The twelve_hour_format of this Server.  # noqa: E501
        :type: bool
        """

        self._twelve_hour_format = twelve_hour_format

    @property
    def version(self):
        """Gets the version of this Server.  # noqa: E501


        :return: The version of this Server.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Server.


        :param version: The version of this Server.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def force_settings(self):
        """Gets the force_settings of this Server.  # noqa: E501


        :return: The force_settings of this Server.  # noqa: E501
        :rtype: bool
        """
        return self._force_settings

    @force_settings.setter
    def force_settings(self, force_settings):
        """Sets the force_settings of this Server.


        :param force_settings: The force_settings of this Server.  # noqa: E501
        :type: bool
        """

        self._force_settings = force_settings

    @property
    def coordinate_format(self):
        """Gets the coordinate_format of this Server.  # noqa: E501


        :return: The coordinate_format of this Server.  # noqa: E501
        :rtype: str
        """
        return self._coordinate_format

    @coordinate_format.setter
    def coordinate_format(self, coordinate_format):
        """Sets the coordinate_format of this Server.


        :param coordinate_format: The coordinate_format of this Server.  # noqa: E501
        :type: str
        """

        self._coordinate_format = coordinate_format

    @property
    def attributes(self):
        """Gets the attributes of this Server.  # noqa: E501


        :return: The attributes of this Server.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Server.


        :param attributes: The attributes of this Server.  # noqa: E501
        :type: dict(str, object)
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Server, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Server):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
