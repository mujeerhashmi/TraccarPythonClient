# coding: utf-8

"""
    4CS GPS Tracking System

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Permission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'int',
        'device_id': 'int',
        'group_id': 'int',
        'geofence_id': 'int',
        'calendar_id': 'int',
        'attribute_id': 'int',
        'driver_id': 'int',
        'managed_user_id': 'int'
    }

    attribute_map = {
        'user_id': 'userId',
        'device_id': 'deviceId',
        'group_id': 'groupId',
        'geofence_id': 'geofenceId',
        'calendar_id': 'calendarId',
        'attribute_id': 'attributeId',
        'driver_id': 'driverId',
        'managed_user_id': 'managedUserId'
    }

    def __init__(self, user_id=None, device_id=None, group_id=None, geofence_id=None, calendar_id=None, attribute_id=None, driver_id=None, managed_user_id=None):  # noqa: E501
        """Permission - a model defined in Swagger"""  # noqa: E501

        self._user_id = None
        self._device_id = None
        self._group_id = None
        self._geofence_id = None
        self._calendar_id = None
        self._attribute_id = None
        self._driver_id = None
        self._managed_user_id = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if device_id is not None:
            self.device_id = device_id
        if group_id is not None:
            self.group_id = group_id
        if geofence_id is not None:
            self.geofence_id = geofence_id
        if calendar_id is not None:
            self.calendar_id = calendar_id
        if attribute_id is not None:
            self.attribute_id = attribute_id
        if driver_id is not None:
            self.driver_id = driver_id
        if managed_user_id is not None:
            self.managed_user_id = managed_user_id

    @property
    def user_id(self):
        """Gets the user_id of this Permission.  # noqa: E501

        User Id, can be only first parameter  # noqa: E501

        :return: The user_id of this Permission.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Permission.

        User Id, can be only first parameter  # noqa: E501

        :param user_id: The user_id of this Permission.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def device_id(self):
        """Gets the device_id of this Permission.  # noqa: E501

        Device Id, can be first parameter or second only in combination with userId  # noqa: E501

        :return: The device_id of this Permission.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this Permission.

        Device Id, can be first parameter or second only in combination with userId  # noqa: E501

        :param device_id: The device_id of this Permission.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def group_id(self):
        """Gets the group_id of this Permission.  # noqa: E501

        Group Id, can be first parameter or second only in combination with userId  # noqa: E501

        :return: The group_id of this Permission.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Permission.

        Group Id, can be first parameter or second only in combination with userId  # noqa: E501

        :param group_id: The group_id of this Permission.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def geofence_id(self):
        """Gets the geofence_id of this Permission.  # noqa: E501

        Geofence Id, can be second parameter only  # noqa: E501

        :return: The geofence_id of this Permission.  # noqa: E501
        :rtype: int
        """
        return self._geofence_id

    @geofence_id.setter
    def geofence_id(self, geofence_id):
        """Sets the geofence_id of this Permission.

        Geofence Id, can be second parameter only  # noqa: E501

        :param geofence_id: The geofence_id of this Permission.  # noqa: E501
        :type: int
        """

        self._geofence_id = geofence_id

    @property
    def calendar_id(self):
        """Gets the calendar_id of this Permission.  # noqa: E501

        Calendar Id, can be second parameter only and only in combination with userId  # noqa: E501

        :return: The calendar_id of this Permission.  # noqa: E501
        :rtype: int
        """
        return self._calendar_id

    @calendar_id.setter
    def calendar_id(self, calendar_id):
        """Sets the calendar_id of this Permission.

        Calendar Id, can be second parameter only and only in combination with userId  # noqa: E501

        :param calendar_id: The calendar_id of this Permission.  # noqa: E501
        :type: int
        """

        self._calendar_id = calendar_id

    @property
    def attribute_id(self):
        """Gets the attribute_id of this Permission.  # noqa: E501

        Computed Attribute Id, can be second parameter only  # noqa: E501

        :return: The attribute_id of this Permission.  # noqa: E501
        :rtype: int
        """
        return self._attribute_id

    @attribute_id.setter
    def attribute_id(self, attribute_id):
        """Sets the attribute_id of this Permission.

        Computed Attribute Id, can be second parameter only  # noqa: E501

        :param attribute_id: The attribute_id of this Permission.  # noqa: E501
        :type: int
        """

        self._attribute_id = attribute_id

    @property
    def driver_id(self):
        """Gets the driver_id of this Permission.  # noqa: E501

        Driver Id, can be second parameter only  # noqa: E501

        :return: The driver_id of this Permission.  # noqa: E501
        :rtype: int
        """
        return self._driver_id

    @driver_id.setter
    def driver_id(self, driver_id):
        """Sets the driver_id of this Permission.

        Driver Id, can be second parameter only  # noqa: E501

        :param driver_id: The driver_id of this Permission.  # noqa: E501
        :type: int
        """

        self._driver_id = driver_id

    @property
    def managed_user_id(self):
        """Gets the managed_user_id of this Permission.  # noqa: E501

        User Id, can be second parameter only and only in combination with userId  # noqa: E501

        :return: The managed_user_id of this Permission.  # noqa: E501
        :rtype: int
        """
        return self._managed_user_id

    @managed_user_id.setter
    def managed_user_id(self, managed_user_id):
        """Sets the managed_user_id of this Permission.

        User Id, can be second parameter only and only in combination with userId  # noqa: E501

        :param managed_user_id: The managed_user_id of this Permission.  # noqa: E501
        :type: int
        """

        self._managed_user_id = managed_user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Permission, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Permission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
