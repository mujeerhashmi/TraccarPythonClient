# coding: utf-8

"""
    4CS GPS Tracking System

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import TraccarClient
from TraccarClient.api.default_api import DefaultApi  # noqa: E501
from TraccarClient.rest import ApiException


class TestDefaultApi(unittest.TestCase):
    """DefaultApi unit test stubs"""

    def setUp(self):
        self.api = TraccarClient.api.default_api.DefaultApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_attributes_computed_get(self):
        """Test case for attributes_computed_get

        Fetch a list of Attributes  # noqa: E501
        """
        pass

    def test_attributes_computed_id_delete(self):
        """Test case for attributes_computed_id_delete

        Delete an Attribute  # noqa: E501
        """
        pass

    def test_attributes_computed_id_put(self):
        """Test case for attributes_computed_id_put

        Update an Attribute  # noqa: E501
        """
        pass

    def test_attributes_computed_post(self):
        """Test case for attributes_computed_post

        Create an Attribute  # noqa: E501
        """
        pass

    def test_calendars_get(self):
        """Test case for calendars_get

        Fetch a list of Calendars  # noqa: E501
        """
        pass

    def test_calendars_id_delete(self):
        """Test case for calendars_id_delete

        Delete a Calendar  # noqa: E501
        """
        pass

    def test_calendars_id_put(self):
        """Test case for calendars_id_put

        Update a Calendar  # noqa: E501
        """
        pass

    def test_calendars_post(self):
        """Test case for calendars_post

        Create a Calendar  # noqa: E501
        """
        pass

    def test_commands_get(self):
        """Test case for commands_get

        Fetch a list of Saved Commands  # noqa: E501
        """
        pass

    def test_commands_id_delete(self):
        """Test case for commands_id_delete

        Delete a Saved Command  # noqa: E501
        """
        pass

    def test_commands_id_put(self):
        """Test case for commands_id_put

        Update a Saved Command  # noqa: E501
        """
        pass

    def test_commands_post(self):
        """Test case for commands_post

        Create a Saved Command  # noqa: E501
        """
        pass

    def test_commands_send_get(self):
        """Test case for commands_send_get

        Fetch a list of Saved Commands supported by Device at the moment  # noqa: E501
        """
        pass

    def test_commands_send_post(self):
        """Test case for commands_send_post

        Dispatch commands to device  # noqa: E501
        """
        pass

    def test_commands_types_get(self):
        """Test case for commands_types_get

        Fetch a list of available Commands for the Device or all possible Commands if Device ommited  # noqa: E501
        """
        pass

    def test_devices_get(self):
        """Test case for devices_get

        Fetch a list of Devices  # noqa: E501
        """
        pass

    def test_devices_id_accumulators_put(self):
        """Test case for devices_id_accumulators_put

        Update total distance and hours of the Device  # noqa: E501
        """
        pass

    def test_devices_id_delete(self):
        """Test case for devices_id_delete

        Delete a Device  # noqa: E501
        """
        pass

    def test_devices_id_put(self):
        """Test case for devices_id_put

        Update a Device  # noqa: E501
        """
        pass

    def test_devices_post(self):
        """Test case for devices_post

        Create a Device  # noqa: E501
        """
        pass

    def test_drivers_get(self):
        """Test case for drivers_get

        Fetch a list of Drivers  # noqa: E501
        """
        pass

    def test_drivers_id_delete(self):
        """Test case for drivers_id_delete

        Delete a Driver  # noqa: E501
        """
        pass

    def test_drivers_id_put(self):
        """Test case for drivers_id_put

        Update a Driver  # noqa: E501
        """
        pass

    def test_drivers_post(self):
        """Test case for drivers_post

        Create a Driver  # noqa: E501
        """
        pass

    def test_events_id_get(self):
        """Test case for events_id_get

        """
        pass

    def test_geofences_get(self):
        """Test case for geofences_get

        Fetch a list of Geofences  # noqa: E501
        """
        pass

    def test_geofences_id_delete(self):
        """Test case for geofences_id_delete

        Delete a Geofence  # noqa: E501
        """
        pass

    def test_geofences_id_put(self):
        """Test case for geofences_id_put

        Update a Geofence  # noqa: E501
        """
        pass

    def test_geofences_post(self):
        """Test case for geofences_post

        Create a Geofence  # noqa: E501
        """
        pass

    def test_groups_get(self):
        """Test case for groups_get

        Fetch a list of Groups  # noqa: E501
        """
        pass

    def test_groups_id_delete(self):
        """Test case for groups_id_delete

        Delete a Group  # noqa: E501
        """
        pass

    def test_groups_id_put(self):
        """Test case for groups_id_put

        Update a Group  # noqa: E501
        """
        pass

    def test_groups_post(self):
        """Test case for groups_post

        Create a Group  # noqa: E501
        """
        pass

    def test_maintenance_get(self):
        """Test case for maintenance_get

        Fetch a list of Maintenance  # noqa: E501
        """
        pass

    def test_maintenance_id_delete(self):
        """Test case for maintenance_id_delete

        Delete a Maintenance  # noqa: E501
        """
        pass

    def test_maintenance_id_put(self):
        """Test case for maintenance_id_put

        Update a Maintenance  # noqa: E501
        """
        pass

    def test_maintenance_post(self):
        """Test case for maintenance_post

        Create a Maintenance  # noqa: E501
        """
        pass

    def test_notifications_get(self):
        """Test case for notifications_get

        Fetch a list of Notifications  # noqa: E501
        """
        pass

    def test_notifications_id_delete(self):
        """Test case for notifications_id_delete

        Delete a Notification  # noqa: E501
        """
        pass

    def test_notifications_id_put(self):
        """Test case for notifications_id_put

        Update a Notification  # noqa: E501
        """
        pass

    def test_notifications_post(self):
        """Test case for notifications_post

        Create a Notification  # noqa: E501
        """
        pass

    def test_notifications_test_post(self):
        """Test case for notifications_test_post

        Send test notification to current user via Email and SMS  # noqa: E501
        """
        pass

    def test_notifications_types_get(self):
        """Test case for notifications_types_get

        Fetch a list of available Notification types  # noqa: E501
        """
        pass

    def test_permissions_delete(self):
        """Test case for permissions_delete

        Unlink an Object from another Object  # noqa: E501
        """
        pass

    def test_permissions_post(self):
        """Test case for permissions_post

        Link an Object to another Object  # noqa: E501
        """
        pass

    def test_positions_get(self):
        """Test case for positions_get

        Fetches a list of Positions  # noqa: E501
        """
        pass

    def test_reports_events_get(self):
        """Test case for reports_events_get

        Fetch a list of Events within the time period for the Devices or Groups  # noqa: E501
        """
        pass

    def test_reports_route_get(self):
        """Test case for reports_route_get

        Fetch a list of Positions within the time period for the Devices or Groups  # noqa: E501
        """
        pass

    def test_reports_stops_get(self):
        """Test case for reports_stops_get

        Fetch a list of ReportStops within the time period for the Devices or Groups  # noqa: E501
        """
        pass

    def test_reports_summary_get(self):
        """Test case for reports_summary_get

        Fetch a list of ReportSummary within the time period for the Devices or Groups  # noqa: E501
        """
        pass

    def test_reports_trips_get(self):
        """Test case for reports_trips_get

        Fetch a list of ReportTrips within the time period for the Devices or Groups  # noqa: E501
        """
        pass

    def test_server_get(self):
        """Test case for server_get

        Fetch Server information  # noqa: E501
        """
        pass

    def test_server_put(self):
        """Test case for server_put

        Update Server information  # noqa: E501
        """
        pass

    def test_session_delete(self):
        """Test case for session_delete

        Close the Session  # noqa: E501
        """
        pass

    def test_session_get(self):
        """Test case for session_get

        Fetch Session information  # noqa: E501
        """
        pass

    def test_session_post(self):
        """Test case for session_post

        Create a new Session  # noqa: E501
        """
        pass

    def test_statistics_get(self):
        """Test case for statistics_get

        Fetch server Statistics  # noqa: E501
        """
        pass

    def test_users_get(self):
        """Test case for users_get

        Fetch a list of Users  # noqa: E501
        """
        pass

    def test_users_id_delete(self):
        """Test case for users_id_delete

        Delete a User  # noqa: E501
        """
        pass

    def test_users_id_put(self):
        """Test case for users_id_put

        Update a User  # noqa: E501
        """
        pass

    def test_users_post(self):
        """Test case for users_post

        Create a User  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
